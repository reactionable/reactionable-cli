// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/TestEntities.test.tsx": components/test-entities/TestEntities.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import TestEntities from './TestEntities';

describe("TestEntities", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <TestEntities />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/TestEntities.tsx": components/test-entities/TestEntities.tsx 1`] = `
"import { Crud, useTranslation } from '@reactionable/core';
import React, { PropsWithChildren, ReactElement, lazy } from 'react';
import { ITestEntityData } from './TestEntitiesConfig';

const ListTestEntities = lazy(() => import("./list-test-entities/ListTestEntities"));

const ReadTestEntity = lazy(() => import("./read-test-entity/ReadTestEntity"));

type ITestEntitiesProps = unknown;


const TestEntities = (props: PropsWithChildren<ITestEntitiesProps>): ReactElement => {
  const { t } = useTranslation();
  
  return <>
    
    
    <Crud<ITestEntityData>
name="TestEntity"
listComponent={ ListTestEntities }
readComponent={ ReadTestEntity }
{...props}
/>
  </>;
};

export default TestEntities;"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/TestEntitiesConfig.tsx": components/test-entities/TestEntitiesConfig.tsx 1`] = `
"import { useList, useRead, useTranslation } from '@reactionable/core';
import { FormField, IUseCrudConfigResult } from '@reactionable/ui-bootstrap';
import React from 'react';
import { string } from 'yup';

export type ITestEntityData = {
  id: string;
  label: string;
};


export type ITestEntityValues = Omit<ITestEntityData, "id">;


const FormChildren = () => {
  const { t } = useTranslation("testEntities");

  return (
    <>
      <FormField name="label" label={t("Label")} placeholder={t("Label")} autoFocus={true} required/>
    </>
  );
};


export const useTestEntitiesConfig = (): IUseCrudConfigResult<
  ITestEntityValues,
  ITestEntityData
> => {
  const { t } = useTranslation("testEntities");

  return {
    onCreate: async (data: ITestEntityValues) => null,
    onUpdate: async (data: ITestEntityValues) => null,
    onDelete: async (id: ITestEntityData["id"]) => null,
    useRead: (variables) =>
      useRead<ITestEntityData>({
        handleQuery: async () => null,
        variables,
      }),
    useList: (variables) =>
      useList<ITestEntityData>({
        handleQuery: async () => null,
        variables,
      }),
    initialValues: {
      label: "",
    },
    validationSchema: {
      label: string()
        .min(1, t("Test entity label must be at least 1 characters"))
        .required(t("Test entity label is required")),
    },
    formChildren: FormChildren,
  };
};"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/create-test-entity/CreateTestEntity.test.tsx": components/test-entities/create-test-entity/CreateTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import CreateTestEntity from './CreateTestEntity';

describe("CreateTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <CreateTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/create-test-entity/CreateTestEntity.tsx": components/test-entities/create-test-entity/CreateTestEntity.tsx 1`] = `
"import { useTranslation } from '@reactionable/core';
import { Create, ICreateProps } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement } from 'react';
import { ITestEntityData, ITestEntityValues, useTestEntitiesConfig } from '../TestEntitiesConfig';

type ICreateTestEntityProps = {
  onSuccess?: ICreateProps<ITestEntityValues, ITestEntityData>["form"]["onSuccess"];
};


const CreateTestEntity = (props: PropsWithChildren<ICreateTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const {
  onCreate,
  initialValues,
  validationSchema,
  formChildren,
} = useTestEntitiesConfig();

const form = {
  title: t("Create a new test entity"),
  onSubmit: onCreate,
  initialValues,
  validationSchema,
  children: formChildren,
  successMessage: "TestEntity has been successfully created",
  onSuccess: props.onSuccess,
};
  return <>
    
    
    <Create<ITestEntityValues, ITestEntityData> modal form={form}>{props.children}</Create>
  </>;
};

export default CreateTestEntity;"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/delete-test-entity/DeleteTestEntity.test.tsx": components/test-entities/delete-test-entity/DeleteTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import DeleteTestEntity from './DeleteTestEntity';

describe("DeleteTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <DeleteTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/delete-test-entity/DeleteTestEntity.tsx": components/test-entities/delete-test-entity/DeleteTestEntity.tsx 1`] = `
"import { useTranslation } from '@reactionable/core';
import { Delete, IDeleteProps } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement } from 'react';
import { ITestEntityData, useTestEntitiesConfig } from '../TestEntitiesConfig';

type IDeleteTestEntityProps = {
  id: string; 
  onSuccess?: IDeleteProps<ITestEntityData>["onSuccess"];
  label?: boolean;
};


const DeleteTestEntity = (props: PropsWithChildren<IDeleteTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const { id, label, ...deleteProps} = props;
const { onDelete } = useTestEntitiesConfig();
  return <>
    
    
    <Delete
{...deleteProps}
title={t("Delete test entity")}
confirmationMessage={t("Are you sure you want to delete this test entity ?")}
successMessage={t("The test entity has been deleted")}
onConfirm={() => onDelete(id)}
>
{label ? t("Delete test entity") : undefined}
</Delete>
  </>;
};

export default DeleteTestEntity;"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/list-test-entities/ListTestEntities.test.tsx": components/test-entities/list-test-entities/ListTestEntities.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import ListTestEntities from './ListTestEntities';

describe("ListTestEntities", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <ListTestEntities />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/list-test-entities/ListTestEntities.tsx": components/test-entities/list-test-entities/ListTestEntities.tsx 1`] = `
"import { Head, Suspense, generatePath, useRouteMatch, useTranslation } from '@reactionable/core';
import { Link, ListTable } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement, lazy } from 'react';
import { ITestEntityData, useTestEntitiesConfig } from '../TestEntitiesConfig';

const CreateTestEntity = lazy(() => import("../create-test-entity/CreateTestEntity"));

const DeleteTestEntity = lazy(() => import("../delete-test-entity/DeleteTestEntity"));


type IGoToTestEntityLinkProps = { 
  data: ITestEntityData;
}


const GoToTestEntityLink = ({ data, children }: PropsWithChildren<IGoToTestEntityLinkProps>): ReactElement => {
  const match = useRouteMatch();
  const href = generatePath(
    match.path + ":testEntitiesId", 
    { ...match.params, testEntitiesId: data.id }
  );
  const title = t("Go to test entity \\"{{ label }}\\"", data);

  return <Link href={href} title={title}>{data.label}</Link>;
}


type ITestEntityItemProps = { 
  data: ITestEntityData;
  refetch: () => void;
}


const ListTestEntitiesItem = ({ data, refetch }: PropsWithChildren<ITestEntityItemProps>): ReactElement => {
  const { t } = useTranslation("testEntities");

  return <tr key={"testEntity-" + data.id}>
    <td>
      <GoToTestEntityLink data={data}>{data.label}</GoToEntityLink>
    </td>
    <td>
      <GoToTestEntityLink data={data}>{t("Go to test entity \\"{{ label }}\\"", data)}</Link>
      <Suspense>
        <DeleteTestEntity id={data.id} onSuccess={refetch}>
          {t("Delete test entity \\"{{ label }}\\"", data)}
        </DeleteTestEntity>
      </Suspense>
    </td>
  </tr>;
};

type IListTestEntitiesProps = unknown;


const ListTestEntities = (props: PropsWithChildren<IListTestEntitiesProps>): ReactElement => {
  const { t } = useTranslation();
  const { useList } = useTestEntitiesConfig();
  const listProps = useList();
  return <>
    <Head>
        <title>{t("Tests")} - {t("List test entities")}</title>
        <meta name="description" content={t("List test entities description")} />
    </Head>
    <h1>{t("List test entities")}</h1>
    <ListTable<ITestEntityData>
  {...listProps}
  head={[t("Label"), t("Actions")]}
  noData={<>
    <br /> <br />
    {t("You don't have any test entities yet.")}
    <br />
    {t("Click the button to create a new test entity")}
    <br /><br />
    <Suspense>
      <CreateTestEntity onSuccess={listProps.refetch}>
        <Link href="#">{t("Create a new test entity")}</Link>
      </CreateTestEntity>
    </Suspense>
  </>}
  >
  {(data) => <ListTestEntitiesItem data={data} refetch={listProps.refetch} />}</ListTable>
  </>;
};

export default ListTestEntities;"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/read-test-entity/ReadTestEntity.test.tsx": components/test-entities/read-test-entity/ReadTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import ReadTestEntity from './ReadTestEntity';

describe("ReadTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <ReadTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/read-test-entity/ReadTestEntity.tsx": components/test-entities/read-test-entity/ReadTestEntity.tsx 1`] = `
"import { Head, Suspense, useRouteMatch, useTranslation } from '@reactionable/core';
import { Link, Read } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement, lazy } from 'react';
import { ITestEntityData, useTestEntitiesConfig } from '../TestEntitiesConfig';

const UpdateTestEntity = lazy(() => import("../update-test-entity/UpdateTestEntity"));


type ITestEntityItemProps = { 
  data: ITestEntityData;
  refetch: () => void;
}


const ReadTestEntityItem = ({ data, refetch }: PropsWithChildren<ITestEntityItemProps>): ReactElement => {
  const { t } = useTranslation("testEntities");

  return <>
    <Head>
      <title>{t("Tests", { ns: "common" })} - {t("Test entity - {{ label }}", data)}</title>
      <meta name="description" content={t("Test entity - {{ label }}", data)} />
    </Head>
    <h1>{t("Test entity - {{ label }}", data)}</h1>
    <Suspense>
      <UpdateTestEntity
        onSuccess={refetch}
        initialValues={data}
      >
        <Link href="#">{ t("Update test entity \\"{{ label }}\\"", data) }</Link>
      </UpdateTestEntity>
    </Suspense>
  </>;
};

type IReadTestEntityProps = unknown;


const ReadTestEntity = (props: PropsWithChildren<IReadTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const matchParams = useRouteMatch().params;

const { useRead } = useTestEntitiesConfig();
const readProps = useRead({
  id: matchParams.testEntityId,
});

  return <>
    
    
    <Read<ITestEntityData> {...readProps}>
{(props) => <ReadTestEntityItem {...props} refetch={readProps.refetch} />}
</Read>
  </>;
};

export default ReadTestEntity;"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/update-test-entity/UpdateTestEntity.test.tsx": components/test-entities/update-test-entity/UpdateTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import UpdateTestEntity from './UpdateTestEntity';

describe("UpdateTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <UpdateTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "components/test-entities/update-test-entity/UpdateTestEntity.tsx": components/test-entities/update-test-entity/UpdateTestEntity.tsx 1`] = `
"import { useRouteMatch, useTranslation } from '@reactionable/core';
import { IUpdateProps, Update } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement } from 'react';
import { ITestEntityData, ITestEntityValues, useTestEntitiesConfig } from '../TestEntitiesConfig';

type IUpdateTestEntityProps = {
  initialValues: IUpdateProps<ITestEntityValues, ITestEntityData>["form"]["initialValues"];
  onSuccess?: IUpdateProps<ITestEntityValues, ITestEntityData>["form"]["onSuccess"];
};


const UpdateTestEntity = (props: PropsWithChildren<IUpdateTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const matchParams = useRouteMatch().params;
const {
  onUpdate,
  initialValues,
  validationSchema,
  formChildren,
} = useTestEntitiesConfig();

const safeInitialValues: ITestEntityValues & { id: ITestEntityData["id"] } = {
  ...initialValues,
  id: matchParams.testEntityId as ITestEntityData["id"],
};

Object.keys(safeInitialValues).forEach(value => {
  const key = value as keyof ITestEntityValues;
  if (props.initialValues[key]) {
    safeInitialValues[key] = props.initialValues[key] as ITestEntityValues[keyof ITestEntityValues];
  }
});

const form = {
  title: t("Update test entity \\"{{ label }}\\"", safeInitialValues),
  onSubmit: onUpdate,
  initialValues: safeInitialValues,
  validationSchema,
  children: formChildren,
  successMessage: "TestEntity has been successfully updated",
  onSuccess: props.onSuccess,
};
  return <>
    
    
    <Update<ITestEntityValues, ITestEntityData> modal form={form}>{props.children}</Update>
  </>;
};

export default UpdateTestEntity;"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "i18n/i18n.ts": i18n/i18n.ts 1`] = `
"import { initializeI18n } from '@reactionable/core';
import enCommon from './locales/en/common.json';
import enTestEntities from './locales/en/testEntities.json';
import frCommon from './locales/fr/common.json';
import frTestEntities from './locales/fr/testEntities.json';

const resources = {
  en: {
    common: enCommon,
    testEntities: enTestEntities,
  },
  fr: {
    common: frCommon,
    testEntities: frTestEntities,
  },
};




initializeI18n({ resources });"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "i18n/locales/en/testEntities.json": i18n/locales/en/testEntities.json 1`] = `
"{
  "Test entity label must be at least 1 characters": "Test entity label must be at least 1 characters",
  "Test entity label is required": "Test entity label is required",
  "Label": "Label",
  "Create a new test entity": "Create a new test entity",
  "TestEntity has been successfully created": "TestEntity has been successfully created",
  "Delete test entity": "Delete test entity",
  "Are you sure you want to delete this test entity ?": "Are you sure you want to delete this test entity ?",
  "The test entity has been deleted": "The test entity has been deleted",
  "Go to test entity \\"{{ label  }}\\"": "Go to test entity \\"{{ label  }}\\"",
  "Delete test entity \\"{{ label  }}\\"": "Delete test entity \\"{{ label  }}\\"",
  "List test entities": "List test entities",
  "List test entities description": "List test entities description",
  "You don\\"t have any test entities yet.": "You don\\"t have any test entities yet.",
  "Click the button to create a new test entity": "Click the button to create a new test entity",
  "Test entity - {{ label  }}": "Test entity - {{ label  }}",
  "Update test entity \\"{{ label  }}\\"": "Update test entity \\"{{ label  }}\\"",
  "TestEntity has been successfully updated": "TestEntity has been successfully updated"
}"
`;

exports[`createCrudComponent Run for a NextJs project should create crud component file "i18n/locales/fr/testEntities.json": i18n/locales/fr/testEntities.json 1`] = `
"{
  "Test entity label must be at least 1 characters": "Le libellé de l'Test entity doit contenir  au moins 1 charactère",
  "Test entity label is required": "Le libellé de l'Test entity est obligatoire",
  "Label": "Libellé",
  "Create a new test entity": "Créer un nouvel test entity",
  "TestEntity has been successfully created": "L'TestEntity a été créé avec succès",
  "Delete test entity": "Supprimer test entity",
  "Are you sure you want to delete this test entity ?": "Êtes-vous sûr de vouloir supprimer cet test entity ?",
  "The test entity has been deleted": "Le test entity a été supprimé",
  "Go to test entity \\"{{ label  }}\\"": "Aller à l'test entity \\"{{ label  }}\\"",
  "Delete test entity \\"{{ label  }}\\"": "Supprimer l'test entity \\"{{ label  }}\\"",
  "List test entities": "Liste des test entities",
  "List test entities description": "Description de la listes des test entities",
  "You don\\"t have any test entities yet.": "Vous n'avez pas encore de test entities.",
  "Click the button to create a new test entity": "Cliquez sur le bouton pour créer un nouveau test entity",
  "Test entity - {{ label }}": "Test entity - {{ label }}",
  "Update test entity \\"{{ label  }}\\"": "Modifierl l'test entity \\"{{ label  }}\\"",
  "TestEntity has been successfully updated": "L'TestEntity a été modifié avec succès"
}"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/TestEntities.test.tsx": components/test-entities/TestEntities.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import TestEntities from './TestEntities';

describe("TestEntities", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <TestEntities />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/TestEntities.tsx": components/test-entities/TestEntities.tsx 1`] = `
"import { Crud, useTranslation } from '@reactionable/core';
import React, { PropsWithChildren, ReactElement, lazy } from 'react';
import { ITestEntityData } from './TestEntitiesConfig';

const ListTestEntities = lazy(() => import("./list-test-entities/ListTestEntities"));

const ReadTestEntity = lazy(() => import("./read-test-entity/ReadTestEntity"));

type ITestEntitiesProps = unknown;


const TestEntities = (props: PropsWithChildren<ITestEntitiesProps>): ReactElement => {
  const { t } = useTranslation();
  
  return <>
    
    
    <Crud<ITestEntityData>
name="TestEntity"
listComponent={ ListTestEntities }
readComponent={ ReadTestEntity }
{...props}
/>
  </>;
};

export default TestEntities;"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/TestEntitiesConfig.tsx": components/test-entities/TestEntitiesConfig.tsx 1`] = `
"import { useList, useRead, useTranslation } from '@reactionable/core';
import { FormField, IUseCrudConfigResult } from '@reactionable/ui-bootstrap';
import React from 'react';
import { string } from 'yup';

export type ITestEntityData = {
  id: string;
  label: string;
};


export type ITestEntityValues = Omit<ITestEntityData, "id">;


const FormChildren = () => {
  const { t } = useTranslation("testEntities");

  return (
    <>
      <FormField name="label" label={t("Label")} placeholder={t("Label")} autoFocus={true} required/>
    </>
  );
};


export const useTestEntitiesConfig = (): IUseCrudConfigResult<
  ITestEntityValues,
  ITestEntityData
> => {
  const { t } = useTranslation("testEntities");

  return {
    onCreate: async (data: ITestEntityValues) => null,
    onUpdate: async (data: ITestEntityValues) => null,
    onDelete: async (id: ITestEntityData["id"]) => null,
    useRead: (variables) =>
      useRead<ITestEntityData>({
        handleQuery: async () => null,
        variables,
      }),
    useList: (variables) =>
      useList<ITestEntityData>({
        handleQuery: async () => null,
        variables,
      }),
    initialValues: {
      label: "",
    },
    validationSchema: {
      label: string()
        .min(1, t("Test entity label must be at least 1 characters"))
        .required(t("Test entity label is required")),
    },
    formChildren: FormChildren,
  };
};"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/create-test-entity/CreateTestEntity.test.tsx": components/test-entities/create-test-entity/CreateTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import CreateTestEntity from './CreateTestEntity';

describe("CreateTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <CreateTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/create-test-entity/CreateTestEntity.tsx": components/test-entities/create-test-entity/CreateTestEntity.tsx 1`] = `
"import { useTranslation } from '@reactionable/core';
import { Create, ICreateProps } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement } from 'react';
import { ITestEntityData, ITestEntityValues, useTestEntitiesConfig } from '../TestEntitiesConfig';

type ICreateTestEntityProps = {
  onSuccess?: ICreateProps<ITestEntityValues, ITestEntityData>["form"]["onSuccess"];
};


const CreateTestEntity = (props: PropsWithChildren<ICreateTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const {
  onCreate,
  initialValues,
  validationSchema,
  formChildren,
} = useTestEntitiesConfig();

const form = {
  title: t("Create a new test entity"),
  onSubmit: onCreate,
  initialValues,
  validationSchema,
  children: formChildren,
  successMessage: "TestEntity has been successfully created",
  onSuccess: props.onSuccess,
};
  return <>
    
    
    <Create<ITestEntityValues, ITestEntityData> modal form={form}>{props.children}</Create>
  </>;
};

export default CreateTestEntity;"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/delete-test-entity/DeleteTestEntity.test.tsx": components/test-entities/delete-test-entity/DeleteTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import DeleteTestEntity from './DeleteTestEntity';

describe("DeleteTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <DeleteTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/delete-test-entity/DeleteTestEntity.tsx": components/test-entities/delete-test-entity/DeleteTestEntity.tsx 1`] = `
"import { useTranslation } from '@reactionable/core';
import { Delete, IDeleteProps } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement } from 'react';
import { ITestEntityData, useTestEntitiesConfig } from '../TestEntitiesConfig';

type IDeleteTestEntityProps = {
  id: string; 
  onSuccess?: IDeleteProps<ITestEntityData>["onSuccess"];
  label?: boolean;
};


const DeleteTestEntity = (props: PropsWithChildren<IDeleteTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const { id, label, ...deleteProps} = props;
const { onDelete } = useTestEntitiesConfig();
  return <>
    
    
    <Delete
{...deleteProps}
title={t("Delete test entity")}
confirmationMessage={t("Are you sure you want to delete this test entity ?")}
successMessage={t("The test entity has been deleted")}
onConfirm={() => onDelete(id)}
>
{label ? t("Delete test entity") : undefined}
</Delete>
  </>;
};

export default DeleteTestEntity;"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/list-test-entities/ListTestEntities.test.tsx": components/test-entities/list-test-entities/ListTestEntities.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import ListTestEntities from './ListTestEntities';

describe("ListTestEntities", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <ListTestEntities />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/list-test-entities/ListTestEntities.tsx": components/test-entities/list-test-entities/ListTestEntities.tsx 1`] = `
"import { Head, Suspense, generatePath, useRouteMatch, useTranslation } from '@reactionable/core';
import { Link, ListTable } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement, lazy } from 'react';
import { ITestEntityData, useTestEntitiesConfig } from '../TestEntitiesConfig';

const CreateTestEntity = lazy(() => import("../create-test-entity/CreateTestEntity"));

const DeleteTestEntity = lazy(() => import("../delete-test-entity/DeleteTestEntity"));


type IGoToTestEntityLinkProps = { 
  data: ITestEntityData;
}


const GoToTestEntityLink = ({ data, children }: PropsWithChildren<IGoToTestEntityLinkProps>): ReactElement => {
  const match = useRouteMatch();
  const href = generatePath(
    match.path + ":testEntitiesId", 
    { ...match.params, testEntitiesId: data.id }
  );
  const title = t("Go to test entity \\"{{ label }}\\"", data);

  return <Link href={href} title={title}>{data.label}</Link>;
}


type ITestEntityItemProps = { 
  data: ITestEntityData;
  refetch: () => void;
}


const ListTestEntitiesItem = ({ data, refetch }: PropsWithChildren<ITestEntityItemProps>): ReactElement => {
  const { t } = useTranslation("testEntities");

  return <tr key={"testEntity-" + data.id}>
    <td>
      <GoToTestEntityLink data={data}>{data.label}</GoToEntityLink>
    </td>
    <td>
      <GoToTestEntityLink data={data}>{t("Go to test entity \\"{{ label }}\\"", data)}</Link>
      <Suspense>
        <DeleteTestEntity id={data.id} onSuccess={refetch}>
          {t("Delete test entity \\"{{ label }}\\"", data)}
        </DeleteTestEntity>
      </Suspense>
    </td>
  </tr>;
};

type IListTestEntitiesProps = unknown;


const ListTestEntities = (props: PropsWithChildren<IListTestEntitiesProps>): ReactElement => {
  const { t } = useTranslation();
  const { useList } = useTestEntitiesConfig();
  const listProps = useList();
  return <>
    <Head>
        <title>{t("Tests")} - {t("List test entities")}</title>
        <meta name="description" content={t("List test entities description")} />
    </Head>
    <h1>{t("List test entities")}</h1>
    <ListTable<ITestEntityData>
  {...listProps}
  head={[t("Label"), t("Actions")]}
  noData={<>
    <br /> <br />
    {t("You don't have any test entities yet.")}
    <br />
    {t("Click the button to create a new test entity")}
    <br /><br />
    <Suspense>
      <CreateTestEntity onSuccess={listProps.refetch}>
        <Link href="#">{t("Create a new test entity")}</Link>
      </CreateTestEntity>
    </Suspense>
  </>}
  >
  {(data) => <ListTestEntitiesItem data={data} refetch={listProps.refetch} />}</ListTable>
  </>;
};

export default ListTestEntities;"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/read-test-entity/ReadTestEntity.test.tsx": components/test-entities/read-test-entity/ReadTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import ReadTestEntity from './ReadTestEntity';

describe("ReadTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <ReadTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/read-test-entity/ReadTestEntity.tsx": components/test-entities/read-test-entity/ReadTestEntity.tsx 1`] = `
"import { Head, Suspense, useRouteMatch, useTranslation } from '@reactionable/core';
import { Link, Read } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement, lazy } from 'react';
import { ITestEntityData, useTestEntitiesConfig } from '../TestEntitiesConfig';

const UpdateTestEntity = lazy(() => import("../update-test-entity/UpdateTestEntity"));


type ITestEntityItemProps = { 
  data: ITestEntityData;
  refetch: () => void;
}


const ReadTestEntityItem = ({ data, refetch }: PropsWithChildren<ITestEntityItemProps>): ReactElement => {
  const { t } = useTranslation("testEntities");

  return <>
    <Head>
      <title>{t("Tests", { ns: "common" })} - {t("Test entity - {{ label }}", data)}</title>
      <meta name="description" content={t("Test entity - {{ label }}", data)} />
    </Head>
    <h1>{t("Test entity - {{ label }}", data)}</h1>
    <Suspense>
      <UpdateTestEntity
        onSuccess={refetch}
        initialValues={data}
      >
        <Link href="#">{ t("Update test entity \\"{{ label }}\\"", data) }</Link>
      </UpdateTestEntity>
    </Suspense>
  </>;
};

type IReadTestEntityProps = unknown;


const ReadTestEntity = (props: PropsWithChildren<IReadTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const matchParams = useRouteMatch().params;

const { useRead } = useTestEntitiesConfig();
const readProps = useRead({
  id: matchParams.testEntityId,
});

  return <>
    
    
    <Read<ITestEntityData> {...readProps}>
{(props) => <ReadTestEntityItem {...props} refetch={readProps.refetch} />}
</Read>
  </>;
};

export default ReadTestEntity;"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/update-test-entity/UpdateTestEntity.test.tsx": components/test-entities/update-test-entity/UpdateTestEntity.test.tsx 1`] = `
"import { IIdentityProviderProps, useIdentityProviderProps } from '@reactionable/amplify';
import { TestWrapper, i18nTestInstance } from '@reactionable/core';
import { IUIProviderProps, useUIProviderProps } from '@reactionable/ui-bootstrap';
import { render } from '@testing-library/react';
import React from 'react';
import UpdateTestEntity from './UpdateTestEntity';

describe("UpdateTestEntity", () => {

    let identity: IIdentityProviderProps;
    let ui: IUIProviderProps;

    beforeAll(async () => {
        await i18nTestInstance();
        identity = useIdentityProviderProps();
        ui = useUIProviderProps();
    });

    it("renders without crashing", () => {
        const result = render(
            <TestWrapper identity={identity} ui={ui}>
                <UpdateTestEntity />
            </TestWrapper>
        );

        expect(result).toBeTruthy();
    });
});"
`;

exports[`createCrudComponent Run for a React project should create crud component file "components/test-entities/update-test-entity/UpdateTestEntity.tsx": components/test-entities/update-test-entity/UpdateTestEntity.tsx 1`] = `
"import { useRouteMatch, useTranslation } from '@reactionable/core';
import { IUpdateProps, Update } from '@reactionable/ui-bootstrap';
import React, { PropsWithChildren, ReactElement } from 'react';
import { ITestEntityData, ITestEntityValues, useTestEntitiesConfig } from '../TestEntitiesConfig';

type IUpdateTestEntityProps = {
  initialValues: IUpdateProps<ITestEntityValues, ITestEntityData>["form"]["initialValues"];
  onSuccess?: IUpdateProps<ITestEntityValues, ITestEntityData>["form"]["onSuccess"];
};


const UpdateTestEntity = (props: PropsWithChildren<IUpdateTestEntityProps>): ReactElement => {
  const { t } = useTranslation();
  const matchParams = useRouteMatch().params;
const {
  onUpdate,
  initialValues,
  validationSchema,
  formChildren,
} = useTestEntitiesConfig();

const safeInitialValues: ITestEntityValues & { id: ITestEntityData["id"] } = {
  ...initialValues,
  id: matchParams.testEntityId as ITestEntityData["id"],
};

Object.keys(safeInitialValues).forEach(value => {
  const key = value as keyof ITestEntityValues;
  if (props.initialValues[key]) {
    safeInitialValues[key] = props.initialValues[key] as ITestEntityValues[keyof ITestEntityValues];
  }
});

const form = {
  title: t("Update test entity \\"{{ label }}\\"", safeInitialValues),
  onSubmit: onUpdate,
  initialValues: safeInitialValues,
  validationSchema,
  children: formChildren,
  successMessage: "TestEntity has been successfully updated",
  onSuccess: props.onSuccess,
};
  return <>
    
    
    <Update<ITestEntityValues, ITestEntityData> modal form={form}>{props.children}</Update>
  </>;
};

export default UpdateTestEntity;"
`;

exports[`createCrudComponent Run for a React project should create crud component file "i18n/i18n.ts": i18n/i18n.ts 1`] = `
"import { initializeI18n } from '@reactionable/core';
import enCommon from './locales/en/common.json';
import enTestEntities from './locales/en/testEntities.json';
import frCommon from './locales/fr/common.json';
import frTestEntities from './locales/fr/testEntities.json';

const resources = {
  en: {
    common: enCommon,
    testEntities: enTestEntities,
  },
  fr: {
    common: frCommon,
    testEntities: frTestEntities,
  },
};




initializeI18n({ resources });"
`;

exports[`createCrudComponent Run for a React project should create crud component file "i18n/locales/en/testEntities.json": i18n/locales/en/testEntities.json 1`] = `
"{
  "Test entity label must be at least 1 characters": "Test entity label must be at least 1 characters",
  "Test entity label is required": "Test entity label is required",
  "Label": "Label",
  "Create a new test entity": "Create a new test entity",
  "TestEntity has been successfully created": "TestEntity has been successfully created",
  "Delete test entity": "Delete test entity",
  "Are you sure you want to delete this test entity ?": "Are you sure you want to delete this test entity ?",
  "The test entity has been deleted": "The test entity has been deleted",
  "Go to test entity \\"{{ label  }}\\"": "Go to test entity \\"{{ label  }}\\"",
  "Delete test entity \\"{{ label  }}\\"": "Delete test entity \\"{{ label  }}\\"",
  "List test entities": "List test entities",
  "List test entities description": "List test entities description",
  "You don\\"t have any test entities yet.": "You don\\"t have any test entities yet.",
  "Click the button to create a new test entity": "Click the button to create a new test entity",
  "Test entity - {{ label  }}": "Test entity - {{ label  }}",
  "Update test entity \\"{{ label  }}\\"": "Update test entity \\"{{ label  }}\\"",
  "TestEntity has been successfully updated": "TestEntity has been successfully updated"
}"
`;

exports[`createCrudComponent Run for a React project should create crud component file "i18n/locales/fr/testEntities.json": i18n/locales/fr/testEntities.json 1`] = `
"{
  "Test entity label must be at least 1 characters": "Le libellé de l'Test entity doit contenir  au moins 1 charactère",
  "Test entity label is required": "Le libellé de l'Test entity est obligatoire",
  "Label": "Libellé",
  "Create a new test entity": "Créer un nouvel test entity",
  "TestEntity has been successfully created": "L'TestEntity a été créé avec succès",
  "Delete test entity": "Supprimer test entity",
  "Are you sure you want to delete this test entity ?": "Êtes-vous sûr de vouloir supprimer cet test entity ?",
  "The test entity has been deleted": "Le test entity a été supprimé",
  "Go to test entity \\"{{ label  }}\\"": "Aller à l'test entity \\"{{ label  }}\\"",
  "Delete test entity \\"{{ label  }}\\"": "Supprimer l'test entity \\"{{ label  }}\\"",
  "List test entities": "Liste des test entities",
  "List test entities description": "Description de la listes des test entities",
  "You don\\"t have any test entities yet.": "Vous n'avez pas encore de test entities.",
  "Click the button to create a new test entity": "Cliquez sur le bouton pour créer un nouveau test entity",
  "Test entity - {{ label }}": "Test entity - {{ label }}",
  "Update test entity \\"{{ label  }}\\"": "Modifierl l'test entity \\"{{ label  }}\\"",
  "TestEntity has been successfully updated": "L'TestEntity a été modifié avec succès"
}"
`;
